pipeline:
  name: test-release-pipeline
  identifier: testreleasepipeline
  projectIdentifier: DhrubaCI
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: build
        identifier: build
        type: CI
        spec:
          cloneCodebase: true
          sharedPaths:
            - /var/run
            - /shared/customer_artifacts
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: DhrubajyotiDocker
                image: docker:dind
                privileged: true
                entrypoint:
                  - dockerd-entrypoint.sh
          execution:
            steps:
              - step:
                  type: Run
                  name: runTrivyScan
                  identifier: runTrivy
                  spec:
                    connectorRef: DhrubajyotiDocker
                    image: ubuntu:20.04
                    shell: Sh
                    command: |-
                      apt-get update -y  
                      apt-get install wget apt-transport-https gnupg lsb-release -y  
                      wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -  
                      echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list  
                      apt-get update -y  
                      apt-get install trivy -y  
                      trivy -v  
                      trivy -q image --timeout 20m -f json -o /shared/customer_artifacts/aqua.json redhat/ubi8-minimal:latest  
              - step:
                  type: Security
                  spec:
                    privileged: true
                    settings:
                      scan_type: container
                      product_name: aqua-trivy
                      product_config_name: default
                      policy_type: ingestionOnly
                      container_type: docker_v2
                      container_tag: latest
                      container_project: redhat/ubi8-minimal
                      customer_artifacts_path: /shared/customer_artifacts
                      manual_upload_filename: aqua.json
                    imagePullPolicy: Always
                    resources:
                      limits:
                        memory: 1024Mi
                        cpu: 1000m
                  name: ingestTrivyData
                  identifier: aqua_trivy
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
    - stage:
        variables:
          - name: SNYK_IMAGE
            type: String
            value: snyk/snyk-cli:1.745.0-maven-3.5.4
          - name: MAVEN_IMAGE
            type: String
            value: maven:3.8.3-openjdk-11-slim
        type: CI
        spec:
          execution:
            steps:
              - step:
                  type: Security
                  name: security scan
                  identifier: security_scan
                  spec:
                    privileged: true
                    settings:
                      product_name: aqua-trivy
                      product_config_name: aqua-trivy
                      policy_type: orchestratedScan
                      scan_type: container
                      container_type: local_image
                      container_domain: hub.docker.com
                      container_project: harnesscommunity/test-release
                      container_tag: latest
                    imagePullPolicy: Always
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push an image to Docker Registry
                  identifier: Build_and_Push_an_image_to_Docker_Registry
                  spec:
                    connectorRef: harnesscommunitydocker
                    repo: harnesscommunity/test-release
                    tags:
                      - latest
                    dockerfile: Dockerfile
              - step:
                  type: Run
                  name: Snyk Code Test
                  identifier: Snyk_Code_Test
                  spec:
                    connectorRef: account.harnessImage
                    image: <+CI.variables.SNYK_IMAGE>
                    shell: Sh
                    command: |-
                      snyk config set api=$SNYK_TOKEN
                      snyk code test || true
                    privileged: true
                    envVariables:
                      SNYK_TOKEN: <+secrets.getValue("org.SNYK_TOKEN")>
              - step:
                  type: Run
                  name: Build Container
                  identifier: Build_Container
                  spec:
                    connectorRef: account.harnessImage
                    image: docker:dind
                    shell: Sh
                    command: docker build -t harnesscommunity/test-release:<+pipeline.sequenceId> -f Dockerfile.harness .
                    imagePullPolicy: Always
          cloneCodebase: true
          serviceConfig:
            serviceRef: ""
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          serviceDependencies:
            - identifier: DiND
              name: DiND
              type: Service
              spec:
                connectorRef: account.harnessImage
                image: docker:dind
                privileged: true
                resources:
                  limits:
                    memory: 2.0Gi
                    cpu: "1.0"
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        name: CI
        identifier: CI
  properties:
    ci:
      codebase:
        connectorRef: dhrubaaccountconnector
        repoName: release-test
        build: <+input>
  allowStageExecutions: true
